class Solution {

public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return 0; //array contains only 1 element
        if(nums[0] > nums[1]) return 0; //1st element is peak
        if(nums[n-1] > nums[n-2]) return n-1; //last element is peak

        int low = 1, high = n-2;  //as we already checked for 1st and last element
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]>nums[mid-1] && nums[mid] > nums[mid+1]) return mid; //If arr[mid] is the peak
            else if(nums[mid] > nums[mid-1]) low = mid+1; // If we are in the left
            // If we are in the right:
            // Or, arr[mid] is a common point:
            else high = mid-1; 
        }
        return -1;
    }
};
