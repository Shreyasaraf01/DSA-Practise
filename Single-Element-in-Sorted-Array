class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return nums[0]; //if the size of array is one
        if(nums[0] != nums[1]) return nums[0];
        if(nums[n-1] != nums[n-2]) return nums[n-1];
        int low = 1, high = n-2; //as we already checked for 1st and last element
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]!= nums[mid+1] && nums[mid] != nums[mid-1]) return nums[mid];
            if((mid % 2 == 1 && nums[mid] == nums[mid-1]) || (mid % 2 == 0 && nums[mid] == nums[mid+1])){
                low = mid+1; //eliminate left half
            }
            else{
                high = mid-1; //eliminate right half
            }
        }
        return n-1;
    }
};
